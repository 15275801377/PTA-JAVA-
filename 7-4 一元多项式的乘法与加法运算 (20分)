7-4 一元多项式的乘法与加法运算 (20分)
设计函数分别求两个一元多项式的乘积与和。

输入格式:
输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。

输出格式:
输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出0 0。

输入样例:
4 3 4 -5 2  6 1  -2 0
3 5 20  -7 4  3 1
输出样例:
15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1
5 20 -4 4 -5 2 9 1 -2 0
作者
DS课程组
单位
浙江大学
代码长度限制
16 KB
时间限制
200 ms
内存限制
64 MB
Java (javac 1.8.0)

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		int a[] = new int[1001];
		int b[] = new int[1001];
		int n, m1, m2, max1, max2;
		Scanner scanner = new Scanner(System.in);
		n = scanner.nextInt();
		max1 = 0;
		max2 = 0;
		for (int i = 0; i < n; i++) {
			m1 = scanner.nextInt();
			m2 = scanner.nextInt();
			a[m2] = m1;
			if (m2 > max1)
				max1 = m2;
		}
		n = scanner.nextInt();
		for (int i = 0; i < n; i++) {
			m1 = scanner.nextInt();
			m2 = scanner.nextInt();
			b[m2] = m1;
			if (m2 > max2)
				max2 = m2;
		}
		int c[] = new int[1000001];
		int d[] = new int[1001];
		int flag = 1;
		for (int i = 0; i <= max1; i++) {
			if (a[i] != 0) {
				for (int j = 0; j <= max2; j++) {
					if (b[j] != 0) {
						c[i + j] += a[i] * b[j];
						if (c[i + j] != 0)
							flag = 0;
					}
				}
			}
		}
		if (flag == 0) {
			System.out.printf("%d %d", c[max1 + max2], max1 + max2);
			for (int i = max1 + max2 - 1; i >= 0; i--) {
				if (c[i] != 0) {
					System.out.printf(" %d %d", c[i], i);
				}
			}
		}
		if (flag == 1)
			System.out.printf("0 0");
		System.out.println();
		int Max = max1;
		if (max1 < max2)
			Max = max2;
		flag = 1;
		for (int i = 0; i <= Max; i++) {
			d[i] = a[i] + b[i];
			if (d[i] != 0) {
				flag = 0;
				if (i > Max)
					Max = i;
			}
		}
		if (flag == 0) {
			System.out.printf("%d %d", d[Max], Max);
			for (int i = Max - 1; i >= 0; i--) {
				if (d[i] != 0) {
					System.out.printf(" %d %d", d[i], i);
				}
			}
		}
		if (flag == 1)
			System.out.printf("0 0");
	}
}
